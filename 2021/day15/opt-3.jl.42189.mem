        - # Heap struct and methods
        - struct Heap
        0     items::Vector{Pair}
        - end
        - Heap() = Heap([])
        - Base.getindex(h::Heap, i::Int64) = Base.getindex(h.items, i)
        - Base.setindex!(h::Heap, item::Pair, i::Integer) = h.items[i] = item
        - Base.length(h::Heap) = Base.length(h.items)
        - 
        - function bubbleup!(h::Heap, index::Integer=length(h))
        0     n = length(h)
 17650432     while n > 1 && last(h[n ÷ 2]) > last(h[n])
        0         h[n ÷ 2], h[n] = h[n], h[n ÷ 2]
        0         n ÷= 2
        -     end
        - end
        - 
        - # example
        - _h = Heap([Pair("a", 9), Pair("b", 7), Pair("c", 5),
        -            Pair("d", 6), Pair("e", 2), Pair("f", 4),
        -            Pair("g", 3), Pair("h", 8)])
        - 
        - function pushdown!(h::Heap)
        0     L = length(h)
        -     n = 1
        0     while true
        -         n′ = n
        0         l = 2n
        0         r = l + 1
125238048         if l ≤ L && last(h[n′]) > last(h[l])
        -             n′ = l
        -         end
125082464         if r ≤ L && last(h[n′]) > last(h[r])
        -             n′ = r
        -         end
        0         if n != n′
        0             h[n], h[n′] = h[n′], h[n]
        -             n = n′
        -         else
        0             break
        -         end
        -     end
        - end
        - 
        - function insert!(item::Pair, h::Heap)
        -     push!(h.items, item)
        -     bubbleup!(h)
        - end
        - 
        - function top!(h::Heap)
        0     isempty(h.items) && error("heap is empty")
        0     last = pop!(h.items)
        0     if isempty(h.items)
        0         return last
        -     else
        0         firstitem, h[1] = h[1], last
        0         pushdown!(h)
        0         return firstitem
        -     end
        - end
        - 
        - function update!(oldvalue, newpriority, h::Heap)
        -     index = findfirst(x -> x.element == oldvalue, h.items)
        -     if isnothing(index)
        -         insert!(Item(oldvalue, newpriority), h)
        -     else
        -         oldpriority = h[index].priority
        -         h[index] = Item(oldvalue, newpriority)
        -         if newpriority < oldpriority
        -             bubbleup!(h, index)
        -         elseif newpriority > oldpriority
        -             pushdown!(h, index)
        -         end
        -     end
        - end
        - 
        - function dijkstra(m::Matrix, start::Tuple{Int, Int})
      320     h = Heap()
      320     insert!(start => 0, h)
        0     W, H = size(m)
    65664     seen = falses(W, H)
  4160320     risk = zeros(Int, W, H)
        0     while !seen[W, H]
 57721088         (i,j), r = top!(h)
        0         for (x,y) in ((1,0), (-1,0), (0,1), (0,-1))
        0             i′ = i + x
        0             j′ = j + y
 99608720             if 1 ≤ i′ ≤ W && 1 ≤ j′ ≤ H && !seen[i′, j′]
 33279968                 seen[i′, j′] = true
  7801824                 r′ = r + m[i′, j′]
        0                 risk[i′, j′] = r′
 33321792                 insert!((i′, j′) => r′, h)
        -             end
        -         end
        -     end
        0     return risk[W,H]
        - end
        - 
        - function parse_input(io::IO)
        -     reduce(hcat, [parse.(Integer, collect(line)) for line = eachline(io)])
        - end
        - 
  4004000 tile(m::Matrix, x) = @. ((m - 1 + x) % 9) + 1
        - makecol(m::Matrix, range) = vcat([tile(m, x) for x = range]...)
        - makem(m::Matrix) = hcat([makecol(m, range(x, length = 5)) for x=0:4]...)
        - 
        - function partone(file)
        -     m = open(parse_input, file)
        -     dij = dijkstra(m, (1,1))
        -     return dij
        - end
        - 
        - function parttwo(file)
        0     raw = open(parse_input, file)
       96     m = makem(raw)
       32     dij = dijkstra(m, (1,1))
        0     return dij
        - end
        - 
        - function main(file)
        0     partone(file)
        0     parttwo(file)
        - end
